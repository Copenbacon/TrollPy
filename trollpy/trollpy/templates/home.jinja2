{% extends "layout.jinja2" %}
{% block body %}

<div class="row">
  <div id="board" class="small-6 columns">
  </div>
<div id="board" class="small-6 columns">
  <p>Current Game Stats:</p>
  <p>Yea Baby</p>
  </div>
</div>
<input type="button" id="startPositionBtn" value="new game" />

<script>
var game = new Chess('{{ py_board }}');

var removeGreySquares = function() {
    $('#board .square-55d63').css('background', '');
};

var greySquare = function(square) {
    var squareEl = $('#board .square-' + square);

    var background = '#a9a9a9';
    if (squareEl.hasClass('black-3c85d') === true) {
        background = '#696969';
    }

    squareEl.css('background', background);
};

var onDragStart = function(source, piece) {
    // do not pick up pieces if the game is over
    // or if it's not that side's turn
    if (game.game_over() === true ||
        (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
        (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
        return false;
    }
};

var onDrop = function(source, target) {
    removeGreySquares();

    // see if the move is legal
    var move = game.move({
        from: source,
        to: target,
        promotion: 'q' // NOTE: always promote to a queen
    });

    // illegal move
    if (move === null) return 'snapback';
};

var onMouseoverSquare = function(square, piece) {
    // get list of possible moves for this square
    var moves = game.moves({
        square: square,
        verbose: true
    });

    // exit if there are no moves available for this square
    if (moves.length === 0) return;

    // highlight the square they moused over
    greySquare(square);

    // highlight the possible squares for this piece
    for (var i = 0; i < moves.length; i++) {
        greySquare(moves[i].to);
    }
};

var onMouseoutSquare = function(square, piece) {
    removeGreySquares();
};

var onSnapEnd = function() {
    board.position(game.fen());
    $.ajax({
        type: 'POST',
        url: '/{{ request.authenticated_userid }}/move',
        data: {
            board: window.game.fen()
        },
        success: function() {
            console.log("we made a move and it saved!")
            get_board('{{ request.authenticated_userid }}')
        }
    });
}

function get_board(user) {
    user_response = $.ajax({
        dataType: "json",
        url: user + '/api',
        success: function() {
            stuff = user_response.responseJSON;
            render_board(stuff.board)
            game = new Chess(stuff.board);
            game.in_check()
        }
    });
}

function render_board(fen) {
    var cfg = {
        position: fen,
        draggable: true,
        onDragStart: onDragStart,
        onDrop: onDrop,
        onSnapEnd: onSnapEnd,
        dropOffBoard: 'snapback',
        onMouseoutSquare: onMouseoutSquare,
        onMouseoverSquare: onMouseoverSquare,
        sparePieces: false
    };

    board = ChessBoard('board', cfg);
    $(window).resize(board.resize);
    $('#startPositionBtn').click(function() {
        game.reset();
        board.start();
    });
}

render_board('{{ py_board }}')
</script>
{% endblock %}